[{"path":"https://cgoo4.github.io/ggfoundry/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 ggfoundry authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/articles/contrast.html","id":"unicodes","dir":"Articles","previous_headings":"","what":"Unicodes","title":"Contrast with alternatives","text":"extensive range unicodes great option. colourable appear legend.","code":"library(ggfoundry) #> Loading required package: ggplot2 library(tibble) library(patchwork)  theme_set(theme_bw())  random_walk <- \\(x, y, z) cumsum(rnorm(x, mean = y, sd = sqrt(z)))  set.seed(123)  df <- tibble(   x = rep(1:10, 3),   y = c(     random_walk(10, 1, 1),     random_walk(10, 2, 1.2),     random_walk(10, 3, 1.3)   ),   group = factor(c(rep(1, 10), rep(2, 10), rep(3, 10))) )  p <- df |>   ggplot(aes(x, y, shape = group, colour = group, fill = group)) +   geom_line(show.legend = FALSE) +   scale_colour_manual(values = c(\"darkred\", \"darkblue\", \"darkgreen\")) +   scale_fill_manual(values = c(\"pink\", \"lightgreen\", \"skyblue\")) +   theme(plot.subtitle = element_text(size = 10))  p1 <- p +   geom_casting(size = 0.15) +   annotate(\"label\", x = 2.5, y = 22, label = \"Baby\\ngeoms\") +   scale_shape_manual(values = c(\"violin\", \"box\", \"dendro\")) +   labs(     title = \"ggfoundry\",     subtitle = \"On-request colourable fillable shapes\"     )  p2 <- p +   geom_point(size = 4) +   scale_shape_manual(values = c(\"\\u25BC\",\"\\u25CF\",\"\\u25B2\")) +   labs(     title = \"geom_point with unicodes\",     subtitle = \"Range of colourable-only symbols\"     )  p1 + p2 + plot_layout(guides = \"collect\", axes = \"collect\")"},{"path":"https://cgoo4.github.io/ggfoundry/articles/contrast.html","id":"icons","dir":"Articles","previous_headings":"","what":"Icons","title":"Contrast with alternatives","text":"Icons also great option, e.g. brands. One way use ggplot points via showtext ggtext packages. colourable, fill surrounding label rather symbol . legend reflects use richtext geom, .e. shows letters.","code":"library(showtext) library(ggtext)  font_add(\"fa-solid\", \"Font_Awesome_6_Brands-Regular-400.otf\")  showtext_auto()  p2 <- p +   geom_richtext(     aes(label = \"<span style='font-family: \\\"fa-solid\\\"'>&#xf16c;<\/span>\"),     size = 5, label.colour = NA,     ) +   labs(     title = \"ggtext with icons\",     subtitle = paste0(       \"Colourable icons; label fill; \",        \"text legend\"       )     )  p1 + p2 + plot_layout(guides = \"collect\", axes = \"collect\") showtext_auto(enable = FALSE)"},{"path":"https://cgoo4.github.io/ggfoundry/articles/contrast.html","id":"images","dir":"Articles","previous_headings":"","what":"Images","title":"Contrast with alternatives","text":"ggimage great option full images, e.g. png files. Country flags, company logos sports team badges good example use-cases, rendering full image -often desired outcome.","code":"library(ggimage)  df <- tribble(   ~x, ~y,   5, 5,   6, 6,   7, 7,   8, 8 )  p <- df |>   ggplot(aes(x, y, shape = factor(x), fill = factor(x))) +   geom_col() +   scale_fill_viridis_d() +   scale_y_continuous(limits = c(NA, 9)) +   theme(plot.subtitle = element_text(size = 10))  p1 <- p +   geom_casting(size = 0.3, aes(colour = factor(x))) +   geom_text(aes(label = x, colour = factor(x)), show.legend = FALSE) +   annotate(\"label\", x = 5.5, y = 8, label = \"Polygons\") +   scale_shape_manual(values = c(\"pentagon\", \"hexagon\", \"heptagon\", \"octagon\")) +   scale_colour_viridis_d(direction = -1) +   labs(     title = \"ggfoundry\",     subtitle = \"Arbitrary hand-crafted fillable shapes\"     )  p2 <- p +   geom_flag(size = 0.1, image = c(\"DE\", \"FR\", \"CA\", \"US\")) +   labs(     title = \"ggimage\",     subtitle = \"Any as-is whole picture, e.g. png\"     )  p1 + p2 + plot_layout(guides = \"collect\", axes = \"collect\")"},{"path":"https://cgoo4.github.io/ggfoundry/articles/contrast.html","id":"cunning-strategies","dir":"Articles","previous_headings":"","what":"Cunning strategies","title":"Contrast with alternatives","text":"existing symbols fillable, possible strategies achieve similar effect using colour compromising little legend: one larger layer coloured symbol. superimpose smaller second layer differently-coloured symbol. Use photoshop-style special effects provided ggfx package, e.g. adding differently-coloured outer-glow.","code":"library(ggfx)  df <- tribble(   ~x, ~y, ~label,   5, 5, \"+\",   6, 6, \"x\" )  p <- df |>   ggplot(aes(x, y, shape = factor(x), fill = factor(x))) +   geom_col(alpha = 0.5) +   scale_y_continuous(limits = c(NA, 7)) +   scale_fill_viridis_d() +   scale_colour_viridis_d(direction = -1) +   theme(plot.subtitle = element_text(size = 9))  p1 <- p +   geom_casting(size = 0.7, aes(colour = factor(x))) +   geom_text(aes(label = x, colour = factor(x)), show.legend = FALSE) +   annotate(\"label\", x = 5, y = 6.5, label = \"Crosses\") +   scale_shape_manual(values = c(\"cross2\", \"cross1\")) +   labs(     title = \"ggfoundry\",     subtitle = \"Hand-crafted fillable shapes\"     )  p2 <- p +   geom_text(aes(label = label), colour = \"#22A884\", fontface = \"bold\",             size = 24, show.legend = FALSE) +   geom_text(aes(label = label, colour = factor(x)),              size = 20, show.legend = FALSE) +   geom_text(aes(label = x), colour = \"grey60\", nudge_y = -0.15,             size = 3, show.legend = FALSE) +   labs(     title = \"Cunning strategy 1\",     subtitle = \"Superimposed layers\"     )  p3 <- p +   with_outer_glow(geom_text(aes(label = label, colour = factor(x)),     size = 22, show.legend = FALSE,    ), sigma = 0, expand = 8, colour = \"#22A884\") +   geom_text(aes(label = x), colour = \"grey60\", nudge_y = -0.15,             size = 3, show.legend = FALSE) +   labs(     title = \"Cunning strategy 2\",     subtitle = \"Photoshop-style outer glow\"   )  p1 + p2 + p3 + plot_layout(guides = \"collect\", axes = \"collect\")"},{"path":"https://cgoo4.github.io/ggfoundry/articles/contrast.html","id":"diy","dir":"Articles","previous_headings":"","what":"DIY","title":"Contrast with alternatives","text":"Making grob grid graphics option. use ggpp geom_grob() add appropriate layer. circle used basic example.","code":"library(ggpp) library(grid)  df <- tibble(   x = 5:6, y = 5:6,   grob = c(     list(circleGrob(r = 0.7, gp = gpar(       col = \"#fde725\",       fill = \"#440154\",       lwd = 4     ))),     list(circleGrob(r = 0.7, gp = gpar(       col = \"#440154\",       fill = \"#fde725\",       lwd = 4     )))   ) )  p <- df |>   ggplot(aes(x, y, shape = factor(x), fill = factor(x))) +   geom_col(alpha = 0.5) +   scale_y_continuous(limits = c(NA, 7)) +   scale_fill_viridis_d() +   scale_colour_viridis_d(direction = -1)  p1 <- p +   geom_casting(size = 0.7, aes(colour = factor(x))) +   annotate(\"label\", x = 5.5, y = 8, label = \"Circles\") +   scale_shape_manual(values = c(\"circleL\", \"circleR\")) +   labs(     title = \"ggfoundry\",     subtitle = \"Hand-crafted fillable shapes\"     )  p2 <- p +   geom_grob(aes(x, y, label = grob)) +   labs(     title = \"Grob DIY\",     subtitle = \"Lower-level graphics\"   )  p1 + p2 + plot_layout(guides = \"collect\", axes = \"collect\")"},{"path":"https://cgoo4.github.io/ggfoundry/articles/example_uses.html","id":"display-a-palette","dir":"Articles","previous_headings":"","what":"Display a palette","title":"Showcase","text":"large collection palettes brought together single interface paletteer package. ’s used load Van Gogh palette “Starry Night”. ggfoundry’s display_palette() shows loaded palette associated hex codes using default shape jar container set. outline colour defaults mid-grey better dark-mode support per example post.","code":"pal_name <- \"vangogh::StarryNight\"  pal <- paletteer_d(pal_name)  display_palette(pal, pal_name)"},{"path":"https://cgoo4.github.io/ggfoundry/articles/example_uses.html","id":"sunflower-plot","dir":"Articles","previous_headings":"","what":"Sunflower plot","title":"Showcase","text":"Using palette exhibited , inspired python Stack Overflow answer, sunflower shapes combined geom_hex() make possible kind ggplot. additional petal reflects increased range count values shown legend. choice ggplot2 cut, .e. cut_number(), cut_interval() cut_width(), provides flexibility ranges constructed.","code":"shapes <- shapes_cast() |>   filter(set == \"flower\") |>   pull(shape)  ggplot(diamonds, aes(carat, price)) +   geom_hex(bins = 10, colour = pal[3]) +   geom_casting(     aes(       shape = cut_number(after_stat(count), 8, dig.lab = 4),       group = cut_number(after_stat(count), 8)     ),     size = 0.12, bins = 10, stat = \"binhex\", colour = pal[1], fill = pal[4]   ) +   scale_shape_manual(values = shapes) +   scale_y_continuous(labels = label_currency(scale_cut = cut_short_scale())) +   scale_fill_gradient(     low = pal[2], high = pal[1],     labels = label_number(scale_cut = append(cut_short_scale(), 1))   ) +   labs(     title = \"Sunflower Plot\",     shape = \"Count\\nIntervals\",     fill = \"Counts\", y = \"Price\", x = \"Carat\"   ) +   theme_bw()"},{"path":"https://cgoo4.github.io/ggfoundry/articles/example_uses.html","id":"shapes-identified-by-data","dir":"Articles","previous_headings":"","what":"Shapes identified by data","title":"Showcase","text":"sunflower plot, scale_shape_manual() specifies desired shapes. Alternatively, data may already specify identity illustrated using Allison Horst’s palmerpenguins dataset ggfoundry’s penguin-set shapes.","code":"count_df <- penguins |>    filter(!is.na(body_mass_g)) |>    mutate(     species = str_to_lower(species),     cut_mass = cut_width(body_mass_g, width = 500, dig.lab = 4)     ) |>    count(species, island, cut_mass)   count_df |>    ggplot(aes(species, cut_mass, fill = species)) +   geom_casting(aes(shape = species), size = 0.25) +   geom_text(aes(label = n), size = 3, nudge_y = 0.2, nudge_x = 0.1) +   scale_discrete_identity(aesthetics = \"shape\", guide = \"legend\") +   facet_wrap(~island, scales = \"free_x\") +   labs(     title = \"Palmer Penguins\",      subtitle = \"Counts by Species, Island & Body Mass Ranges\",     shape = NULL, fill = NULL, x = NULL, y = \"Body Mass (g)\"     ) +   theme_bw() +   theme(     axis.text.x = element_blank(),     axis.ticks.x = element_blank()     ) +   guides(shape = guide_legend(override.aes = list(size = 8)))"},{"path":"https://cgoo4.github.io/ggfoundry/articles/example_uses.html","id":"leafy-dendrograms","dir":"Articles","previous_headings":"","what":"Leafy dendrograms","title":"Showcase","text":"Adding appropriate filled shapes dendrogram can help draw attention important groupings. Shapes ggfoundry’s “leaf” set used augment ggdendro plot.","code":"data <-    rpart(Kyphosis ~ Age + Number + Start, data = kyphosis) |>    dendro_data()  ggplot() +   geom_segment(     aes(x, y, xend = xend, yend = yend),     colour = \"tan4\", data = data$segments,   ) +   geom_label(     aes(x, y, label = label),      size = 3, fill = \"seashell\", data = data$labels) +   geom_casting(aes(x, y, shape = label, fill = label),                 colour = \"tan4\", size = 0.27, data = data$leaf_labels) +   scale_shape_manual(values = c(\"hibiscus\", \"oak\")) +   scale_fill_manual(values = c(\"olivedrab3\", \"darkorange\")) +   labs(title = \"Leafy Dendrogram\", shape = \"Kyphosis\", fill = \"Kyphosis\") +   theme_dendro() +   theme(     plot.title = element_text(hjust = 0.5),     legend.key.size = unit(2, \"line\"),     legend.position = \"top\"     )"},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"ggfoundry","text":"ggfoundry inspired little Stack Overflow posts seeking specific shapes. , truth, mostly personal interest getting acquainted grid graphics (underpinnings ggplot2).","code":""},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"shape-landscape","dir":"Articles","previous_headings":"","what":"Shape landscape","title":"ggfoundry","text":"Yes, already seemingly near-infinite number shapes : familiar ggplot users (fillable) described ggplot2 documentation; Colourable unicodes icons like fontawesome; ggimage enables use whole pictures; DIY (--) approach: Conjuring grobs (grid graphical objects); perhaps sprinkle trigonometry. sometimes just can’t find want. manipulate way like. ggfoundry offers arbitrary hand-crafted colourable fillable shapes ggplot2 reviewed side--side options contrast alternatives.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"foundry-process","dir":"Articles","previous_headings":"","what":"Foundry process","title":"ggfoundry","text":"artisanal symbols begin life hand-drawn vector images two layers: outline fill. SVG pair converted Cairo graphics format, forged extreme temperatures objects class “Picture”, finally delicately cast gTree representation original shape. quite back started, now editable. cooled finely burnished, gTree grob children may manipulated geom_casting() render desired ggplot special high-end adornments.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"available-shapes","dir":"Articles","previous_headings":"","what":"Available shapes","title":"ggfoundry","text":"ggfoundry may well destination “last resort”! travelling mountains, seas forests world search elusive shape (small set), hand-made grob may fillable “Holy Grail” sought via Github issue. sets included latest version package. can “mix match” shapes different sets; “set” grouping shapes documentation use shapes_cast() filter desired shapes.","code":"library(ggfoundry) library(dplyr) library(forcats) library(stringr)  df <- shapes_cast() |>    filter(!str_ends(shape, \"3|4|5|6\")) |>    mutate(x = row_number(), shape = fct_inorder(shape), .by = set)  df |>    ggplot(aes(x, set)) +   geom_text(aes(label = shape), nudge_y = -0.5, colour = \"grey70\", size = 3) +   geom_casting(aes(shape = shape), size = 0.19, fill = \"skyblue\") +   scale_shape_manual(values = as.character(df$shape)) +   scale_x_continuous(expand = expansion(add = 0.5)) +   scale_y_discrete(expand = expansion(add = 0.7)) +   labs(x = NULL, y = NULL, caption = \"sunflowers 1-8 available\") +   theme_minimal() +   theme(     text = element_text(colour = \"grey70\"),     axis.text.y = element_text(angle = 90, hjust = 0.5),     axis.text.x = element_blank(),     axis.ticks.x = element_blank(),     legend.position = \"none\"     )"},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"simple-example","dir":"Articles","previous_headings":"","what":"Simple example","title":"ggfoundry","text":"Using made-data simulating “random walk”, geom_casting() adds layer custom shapes plot. shape mapped variable, scale_shape_manual() required explicitly name desired shapes character vector. standard shapes (used example geom_point()) associated number, e.g. circle 19, whereas geom_casting() shapes associated character strings. One grob created 2 groups. grob stores x y coordinates group enable shape rendered several locations. Using scale_colour_manual() scale_fill_manual(), can also select custom palette shape colours fills.  See showcase article explore use cases contrast alternatives review options.","code":"# Toy Data set.seed(123)  random_walk <- \\(x, y, z) cumsum(rnorm(x, mean = y, sd = sqrt(z)))  df <- data.frame(   x = rep(1:10, 2),   y = c(     random_walk(10, 1, 1),     random_walk(10, 3, 1.3)   ),   group = factor(c(rep(1, 10), rep(2, 10))) )  # Plot with geom_casting() df |>   ggplot(aes(x, y, shape = group, colour = group, fill = group)) +   geom_line(show.legend = FALSE) +   geom_casting() +   scale_colour_manual(values = c(\"darkred\", \"darkgreen\")) +   scale_fill_manual(values = c(\"pink\", \"lightgreen\")) +   scale_shape_manual(values = c(\"cross1\", \"cross2\")) +   labs(title = \"ggfoundry\") +   theme_bw() +   theme(plot.subtitle = element_text(size = 10))"},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"ggfoundry","text":"Without pivotal grConvert (Potter 2024) grImport2 (Potter Murrell 2023) packages, foundry process viable. thanks work behind ggplot2 (Wickham 2016), may shapes cast beautifully visualised.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carl Goodwin. Author, maintainer, copyright holder.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Goodwin, Carl. 2024. Arbitrary shapes {ggplot2}. https://cgoo4.github.io/ggfoundry/","code":"@Manual{,   title = {Shape Foundry for {ggplot2}},   author = {Carl Goodwin},   year = {2024},   url = {https://cgoo4.github.io/ggfoundry/}, }"},{"path":"https://cgoo4.github.io/ggfoundry/index.html","id":"ggfoundry-","dir":"","previous_headings":"","what":"Shape Foundry & Geom for ggplot2","title":"Shape Foundry & Geom for ggplot2","text":"Arbitrary hand-crafted fillable shapes ggplot2. New shapes may feature requested via Github issue.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Shape Foundry & Geom for ggplot2","text":"","code":"install.packages(\"ggfoundry\")"},{"path":"https://cgoo4.github.io/ggfoundry/index.html","id":"development-version","dir":"","previous_headings":"","what":"Development version","title":"Shape Foundry & Geom for ggplot2","text":"get bug fix, use feature development version, can install ggfoundry GitHub.","code":"# install.packages(\"pak\") pak::pak(\"cgoo4/ggfoundry\")"},{"path":"https://cgoo4.github.io/ggfoundry/index.html","id":"basic-example","dir":"","previous_headings":"","what":"Basic example","title":"Shape Foundry & Geom for ggplot2","text":"See get started vignette supporting package-website articles details, including available shapes, showcase examples ggfoundry contrasts alternative strategies.","code":"library(ggfoundry) #> Loading required package: ggplot2 ggplot(mtcars, aes(wt, mpg, fill = factor(cyl))) +   geom_casting(aes(shape = factor(cyl))) +   scale_fill_manual(values = c(\"skyblue\", \"lightgreen\", \"pink\")) +   scale_shape_manual(values = c(\"violin\", \"dendro\", \"box\")) +   theme_bw()"},{"path":"https://cgoo4.github.io/ggfoundry/reference/display_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a palette using fillable shapes — display_palette","title":"Display a palette using fillable shapes — display_palette","text":"Creates visualisation chosen palette colour selected fillable shape.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/display_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a palette using fillable shapes — display_palette","text":"","code":"display_palette(   fill,   pal_name,   colour = \"grey50\",   color = colour,   shape = c(\"jar\", \"tube\") )"},{"path":"https://cgoo4.github.io/ggfoundry/reference/display_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a palette using fillable shapes — display_palette","text":"fill colour shape fill. pal_name character string name palette. colour, color colour shape outline. Defaults mid-grey better support website's light dark mode. shape character string name shape, e.g. \"jar\".","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/display_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display a palette using fillable shapes — display_palette","text":"ggplot2 object.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/display_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a palette using fillable shapes — display_palette","text":"","code":"display_palette(   c(\"skyblue\", \"lightgreen\", \"pink\", \"bisque\"),   \"Custom Palette Names\"   )  display_palette(   c(\"#9986A5\", \"#79402E\", \"#CCBA72\", \"#0F0D0E\", \"#D9D0D3\", \"#8D8680\"),   \"Vector of Hex Codes\",   shape = \"tube\",   colour = \"black\"   )  display_palette(   c(     \"#423C29\", \"#333031\", \"#8F898B\", \"#D2C9CB\", \"#AFA7A5\", \"#8D8680\",     \"#9986A5\", \"#8A666E\", \"#7B4638\", \"#976C46\", \"#BCA365\", \"#988A56\"     ),   \"Multiple Rows\"   )"},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":null,"dir":"Reference","previous_headings":"","what":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"Arbitrary hand-crafted colourable fillable shapes ggplot2. New shapes may feature requested via Github issue.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"","code":"geom_casting(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"geom layer can added ggplot.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"Behind scenes, pair hand-drawn vector images (outline & fill) converted Cairo graphics library SVG files, grid graphical objects (grobs) use ggplot2 layer. default, \"violin\" shape used. shape mapped variable, e.g. aes(shape = factor(cyl)), scale_shape_manual() also required explicitly name desired shapes character vector (see examples). standard shapes associated number, e.g. circle 19, whereas geom_casting() shapes associated character strings. addition supported aesthetics , nudge_x nudge_y also respected.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"geom_casting() understands following aesthetics (required aesthetics bold): x y alpha angle colour fill group shape size Learn setting aesthetics vignette(\"ggplot2-specs\")","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"","code":"library(ggplot2)  # \"Baby violin\" shape by default p <- ggplot(mtcars, aes(wt, mpg)) p + geom_casting()   # Change shape & fill p + geom_casting(shape = \"box\", fill = \"lightgreen\")   # Shapes mapped to a variable ggplot(mtcars, aes(wt, mpg, fill = factor(cyl))) +   geom_casting(aes(shape = factor(cyl))) +   scale_shape_manual(values = c(\"violin\", \"dendro\", \"box\"))"},{"path":"https://cgoo4.github.io/ggfoundry/reference/ggfoundry-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggfoundry: Shape Foundry & Geom for 'ggplot2' — ggfoundry-package","title":"ggfoundry: Shape Foundry & Geom for 'ggplot2' — ggfoundry-package","text":"'ggplot2' extension supports arbitrary hand-crafted colourable & fillable shapes. New shapes may feature requested via Github issue.","code":""},{"path":[]},{"path":"https://cgoo4.github.io/ggfoundry/reference/ggfoundry-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggfoundry: Shape Foundry & Geom for 'ggplot2' — ggfoundry-package","text":"Maintainer: Carl Goodwin carl.goodwin@quantumjitter.com [copyright holder]","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/shapes_cast.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of available shapes — shapes_cast","title":"Get the names of available shapes — shapes_cast","text":"Create data frame available shapes associated sets. may filtered used vector strings scale_shape_manual.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/shapes_cast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of available shapes — shapes_cast","text":"","code":"shapes_cast()"},{"path":"https://cgoo4.github.io/ggfoundry/reference/shapes_cast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of available shapes — shapes_cast","text":"data frame available sets shapes.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/shapes_cast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of available shapes — shapes_cast","text":"","code":"# Returns a data frame of available shapes shapes_cast() #>          set      shape #> 1     circle    circleF #> 3     circle    circleL #> 5     circle    circleR #> 7  container        jar #> 9  container       tube #> 11     cross     cross1 #> 13     cross     cross2 #> 15    flower sunflower1 #> 17    flower sunflower2 #> 19    flower sunflower3 #> 21    flower sunflower4 #> 23    flower sunflower5 #> 25    flower sunflower6 #> 27    flower sunflower7 #> 29    flower sunflower8 #> 31      geom        box #> 33      geom     dendro #> 35      geom     ribbon #> 37      geom     violin #> 39      leaf   hibiscus #> 41      leaf        oak #> 43   penguin     adelie #> 45   penguin  chinstrap #> 47   penguin     gentoo #> 49   polygon   heptagon #> 51   polygon    hexagon #> 53   polygon    octagon #> 55   polygon   pentagon"},{"path":"https://cgoo4.github.io/ggfoundry/news/index.html","id":"ggfoundry-development-version","dir":"Changelog","previous_headings":"","what":"ggfoundry (development version)","title":"ggfoundry (development version)","text":"2 shapes (“oak” & “hibiscus”) added “leaf” set (#10). New display_palette() uses fillable shape palette & hex codes (#9). Uses cli_abort, instead abort, error message handling. Converted showcase vignette article (#11). Moved contrast section get started vignette article (#12). Added use use_spell_check().","code":""},{"path":"https://cgoo4.github.io/ggfoundry/news/index.html","id":"ggfoundry-020","dir":"Changelog","previous_headings":"","what":"ggfoundry 0.2.0","title":"ggfoundry 0.2.0","text":"CRAN release: 2024-06-09 2 shapes (“jar” & “tube”) added “container” set (#1). 8 shapes (“sunflower1” “sunflower8”) added “flower” set (#4). 3 shapes (“gentoo”, “chinstrap” & “adelie”) added “penguin” set (#5). Invalid-shape error message notes shape may development version (#2). New shapes_cast() creates data frame available sets & shapes (#3). Reduced sysdata.rda size 23% switching “bkzip2” “xz” (#6). Fixed shapes outside plotting area zooming (#7). Showcase vignette added.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/news/index.html","id":"ggfoundry-011","dir":"Changelog","previous_headings":"","what":"ggfoundry 0.1.1","title":"ggfoundry 0.1.1","text":"CRAN release: 2024-05-28 Initial CRAN submission.","code":""}]
