[{"path":"https://cgoo4.github.io/ggfoundry/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 ggfoundry authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"ggfoundry","text":"ggfoundry inspired little Stack Overflow posts seeking specific shapes. , truth, mostly personal interest getting acquainted grid graphics (underpinnings ggplot2).","code":""},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"shape-landscape","dir":"Articles","previous_headings":"","what":"Shape landscape","title":"ggfoundry","text":"Yes, already seemingly near-infinite number shapes , capabilities ’ll contrast moment: shapes familiar users ggplot (fillable) described ; Colourable unicodes icons like fontawesome extend options; ggimage enables use whole pictures; --approach: Conjuring grobs (grid graphical objects); perhaps sprinkle trigonometry. sometimes just can’t find want. manipulate way like. ggfoundry offers arbitrary hand-crafted colourable fillable shapes ggplot2. New shapes may feature requested via Github issue.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"foundry-process","dir":"Articles","previous_headings":"","what":"Foundry process","title":"ggfoundry","text":"artisanal symbols begin life hand-drawn vector images two layers: outline fill. SVG pair converted Cairo graphics format, forged extreme temperatures objects class “Picture”, finally delicately cast gTree representation original shape. quite back started, now editable. cooled finely burnished, gTree grob children, may manipulated geom_casting() render desired ggplot special high-end adornments.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"contrast-with-unicodes","dir":"Articles","previous_headings":"","what":"Contrast with unicodes","title":"ggfoundry","text":"extensive range unicodes great option. colourable appear legend.","code":"library(ggfoundry) #> Loading required package: ggplot2 library(tibble) library(patchwork)  random_walk <- \\(x, y, z) cumsum(rnorm(x, mean = y, sd = sqrt(z)))  set.seed(123)  df <- tibble(   x = rep(1:10, 3),   y = c(     random_walk(10, 1, 1),     random_walk(10, 2, 1.2),     random_walk(10, 3, 1.3)   ),   group = factor(c(rep(1, 10), rep(2, 10), rep(3, 10))) )  p <- df |>   ggplot(aes(x, y, shape = group, colour = group, fill = group)) +   geom_line(show.legend = FALSE) +   scale_colour_manual(values = c(\"darkred\", \"darkblue\", \"darkgreen\")) +   scale_fill_manual(values = c(\"pink\", \"lightgreen\", \"skyblue\")) +   theme_bw()  p1 <- p +   geom_casting(size = 0.15) +   annotate(\"label\", x = 2.5, y = 22, label = \"Baby\\ngeoms\") +   scale_shape_manual(values = c(\"violin\", \"box\", \"dendro\")) +   labs(     title = \"ggfoundry\",     subtitle = \"On-request colourable fillable shapes\"     )  p2 <- p +   geom_point(size = 4) +   scale_shape_manual(values = c(\"\\u25BC\",\"\\u25CF\",\"\\u25B2\")) +   labs(     title = \"geom_point with unicodes\",     subtitle = \"Range of colourable-only symbols\"     )  p1 + p2 + plot_layout(guides = \"collect\", axes = \"collect\")"},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"contrast-with-ggtext-icons","dir":"Articles","previous_headings":"","what":"Contrast with ggtext / icons","title":"ggfoundry","text":"Icons also great option, e.g. brands. One way use ggplot points via showtext ggtext packages. colourable, fill surrounding label rather symbol . legend reflects use richtext geom, .e. shows letters.","code":"library(showtext) library(ggtext)  font_add(\"fa-solid\", \"Font_Awesome_6_Brands-Regular-400.otf\")  showtext_auto()  p2 <- p +   geom_richtext(     aes(label = \"<span style='font-family: \\\"fa-solid\\\"'>&#xf16c;<\/span>\"),     size = 5, label.colour = NA,     ) +   labs(     title = \"ggtext with icons\",     subtitle = paste0(       \"Colourable icons; label fill; \",        \"text legend\"       )     )  p1 + p2 + plot_layout(guides = \"collect\", axes = \"collect\") showtext_auto(enable = FALSE)"},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"contrast-with-ggimage","dir":"Articles","previous_headings":"","what":"Contrast with ggimage","title":"ggfoundry","text":"ggimage great option full images, e.g. png files. Country flags, company logos sports team badges good example use-cases, rendering full image -often desired outcome.","code":"library(ggimage)  df <- tribble(   ~x, ~y,   5, 5,   6, 6,   7, 7,   8, 8 )  p <- df |>   ggplot(aes(x, y, shape = factor(x), fill = factor(x))) +   geom_col() +   scale_fill_viridis_d() +   scale_y_continuous(limits = c(NA, 9)) +   theme_bw()  p1 <- p +   geom_casting(size = 0.3, aes(colour = factor(x))) +   geom_text(aes(label = x, colour = factor(x)), show.legend = FALSE) +   annotate(\"label\", x = 5.5, y = 8, label = \"Polygons\") +   scale_shape_manual(values = c(\"pentagon\", \"hexagon\", \"heptagon\", \"octagon\")) +   scale_colour_viridis_d(direction = -1) +   labs(     title = \"ggfoundry\",     subtitle = \"Arbitrary hand-crafted fillable shapes\"     )  p2 <- p +   geom_flag(size = 0.1, image = c(\"DE\", \"FR\", \"CA\", \"US\")) +   labs(     title = \"ggimage\",     subtitle = \"Any as-is whole picture, e.g. png\"     )  p1 + p2 + plot_layout(guides = \"collect\", axes = \"collect\")"},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"contrast-with-cunning-strategies","dir":"Articles","previous_headings":"","what":"Contrast with cunning strategies","title":"ggfoundry","text":"existing symbols fillable, possible strategies achieve similar effect using colour compromising little legend: one larger layer coloured symbol. superimpose smaller second layer differently-coloured symbol. Use photoshop-style special effects provided ggfx package, e.g. adding differently-coloured outer-glow.","code":"library(ggfx)  df <- tribble(   ~x, ~y, ~label,   5, 5, \"+\",   6, 6, \"x\" )  p <- df |>   ggplot(aes(x, y, shape = factor(x), fill = factor(x))) +   geom_col(alpha = 0.5) +   scale_y_continuous(limits = c(NA, 7)) +   scale_fill_viridis_d() +   scale_colour_viridis_d(direction = -1) +   theme_bw()  p1 <- p +   geom_casting(size = 0.7, aes(colour = factor(x))) +   geom_text(aes(label = x, colour = factor(x)), show.legend = FALSE) +   annotate(\"label\", x = 5, y = 6.5, label = \"Crosses\") +   scale_shape_manual(values = c(\"cross2\", \"cross1\")) +   labs(     title = \"ggfoundry\",     subtitle = \"Hand-crafted fillable shapes\"     )  p2 <- p +   geom_text(aes(label = label), colour = \"#22A884\", fontface = \"bold\",             size = 24, show.legend = FALSE) +   geom_text(aes(label = label, colour = factor(x)),              size = 20, show.legend = FALSE) +   geom_text(aes(label = x), colour = \"grey60\", nudge_y = -0.15,             size = 3, show.legend = FALSE) +   labs(     title = \"Cunning strategy 1\",     subtitle = \"Superimposed layers\"     )  p3 <- p +   with_outer_glow(geom_text(aes(label = label, colour = factor(x)),     size = 22, show.legend = FALSE,    ), sigma = 0, expand = 8, colour = \"#22A884\") +   geom_text(aes(label = x), colour = \"grey60\", nudge_y = -0.15,             size = 3, show.legend = FALSE) +   labs(     title = \"Cunning strategy 2\",     subtitle = \"Photoshop-style outer glow\"   )  p1 + p2 + p3 + plot_layout(guides = \"collect\", axes = \"collect\")"},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"contrast-with-diy","dir":"Articles","previous_headings":"","what":"Contrast with DIY","title":"ggfoundry","text":"Making grob grid graphics option. use ggpp geom_grob() add appropriate layer. circle used basic example.","code":"library(ggpp) library(grid)  df <- tibble(   x = 5:6, y = 5:6,   grob = c(     list(circleGrob(r = 0.7, gp = gpar(       col = \"#fde725\",       fill = \"#440154\",       lwd = 4     ))),     list(circleGrob(r = 0.7, gp = gpar(       col = \"#440154\",       fill = \"#fde725\",       lwd = 4     )))   ) )  p <- df |>   ggplot(aes(x, y, shape = factor(x), fill = factor(x))) +   geom_col(alpha = 0.5) +   scale_y_continuous(limits = c(NA, 7)) +   scale_fill_viridis_d() +   scale_colour_viridis_d(direction = -1) +   theme_bw()  p1 <- p +   geom_casting(size = 0.7, aes(colour = factor(x))) +   annotate(\"label\", x = 5.5, y = 8, label = \"Circles\") +   scale_shape_manual(values = c(\"circleL\", \"circleR\")) +   labs(     title = \"ggfoundry\",     subtitle = \"Hand-crafted fillable shapes\"     )  p2 <- p +   geom_grob(aes(x, y, label = grob)) +   labs(     title = \"Grob DIY\",     subtitle = \"Lower-level graphics\"   )  p1 + p2 + plot_layout(guides = \"collect\", axes = \"collect\")"},{"path":"https://cgoo4.github.io/ggfoundry/articles/ggfoundry.html","id":"available-shapes","dir":"Articles","previous_headings":"","what":"Available shapes","title":"ggfoundry","text":"summary, ggfoundry may destination “last resort”! travelling mountains, seas forests world search elusive shape (small set), hand-made grob may fillable “Holy Grail” sought via Github issue. modest starter sets included package. can “mix match” shapes different sets; set purely grouping shapes documentation.","code":"#>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://cgoo4.github.io/ggfoundry/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carl Goodwin. Author, maintainer.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Goodwin, Carl. 2024. Arbitrary shapes {ggplot2}. https://cgoo4.github.io/ggfoundry/","code":"@Manual{,   title = {Shape Foundry for {ggplot2}},   author = {Carl Goodwin},   year = {2024},   url = {https://cgoo4.github.io/ggfoundry/}, }"},{"path":"https://cgoo4.github.io/ggfoundry/index.html","id":"ggfoundry-","dir":"","previous_headings":"","what":"Shape Foundry & Geom for ggplot2","title":"Shape Foundry & Geom for ggplot2","text":"Arbitrary hand-crafted fillable shapes ggplot2. New shapes may feature requested via Github issue.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Shape Foundry & Geom for ggplot2","text":"Install development version ggfoundry GitHub:","code":"# install.packages(\"pak\") pak::pak(\"cgoo4/ggfoundry\")"},{"path":"https://cgoo4.github.io/ggfoundry/index.html","id":"basic-example","dir":"","previous_headings":"","what":"Basic example","title":"Shape Foundry & Geom for ggplot2","text":"See get started details.","code":"library(ggfoundry) #> Loading required package: ggplot2 ggplot(mtcars, aes(wt, mpg, fill = factor(cyl))) +   geom_casting(aes(shape = factor(cyl))) +   scale_fill_manual(values = c(\"skyblue\", \"lightgreen\", \"pink\")) +   scale_shape_manual(values = c(\"violin\", \"dendro\", \"box\")) +   theme_bw()"},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":null,"dir":"Reference","previous_headings":"","what":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"Arbitrary hand-crafted colourable fillable shapes ggplot2. New shapes may feature requested via Github issue.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"","code":"geom_casting(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"geom layer can added ggplot.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"Behind scenes, pair hand-drawn vector images (outline & fill) converted Cairo graphics library SVG files, grid graphical objects (grobs) use ggplot2 layer. default, \"violin\" shape used. shape mapped variable, e.g. aes(shape = factor(cyl)), scale_shape_manual() also required explicitly name desired shapes character vector (see examples). standard shapes associated number, e.g. circle 19, whereas geom_casting() shapes associated character strings. addition supported aesthetics , nudge_x nudge_y also respected.","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"geom_casting() understands following aesthetics (required aesthetics bold): x y alpha angle colour fill group shape size Learn setting aesthetics vignette(\"ggplot2-specs\").","code":""},{"path":"https://cgoo4.github.io/ggfoundry/reference/geom_casting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arbitrary hand-crafted fillable shapes for ggplot2 — geom_casting","text":"","code":"library(ggplot2)  # \"Baby violin\" shape by default p <- ggplot(mtcars, aes(wt, mpg)) p + geom_casting()   # Change shape & fill p + geom_casting(shape = \"box\", fill = \"lightgreen\")   # Shapes mapped to a variable ggplot(mtcars, aes(wt, mpg, fill = factor(cyl))) +   geom_casting(aes(shape = factor(cyl))) +   scale_shape_manual(values = c(\"violin\", \"dendro\", \"box\"))"},{"path":"https://cgoo4.github.io/ggfoundry/reference/ggfoundry-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggfoundry: Shape Foundry & Geom for 'ggplot2' — ggfoundry-package","title":"ggfoundry: Shape Foundry & Geom for 'ggplot2' — ggfoundry-package","text":"'ggplot2' extension supports arbitrary hand-crafted fillable shapes. New shapes may feature requested via Github issue.","code":""},{"path":[]},{"path":"https://cgoo4.github.io/ggfoundry/reference/ggfoundry-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggfoundry: Shape Foundry & Geom for 'ggplot2' — ggfoundry-package","text":"Maintainer: Carl Goodwin carl.goodwin@quantumjitter.com","code":""},{"path":"https://cgoo4.github.io/ggfoundry/news/index.html","id":"ggfoundry-010","dir":"Changelog","previous_headings":"","what":"ggfoundry 0.1.0","title":"ggfoundry 0.1.0","text":"Initial CRAN submission.","code":""}]
